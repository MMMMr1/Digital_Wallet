/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.michalenok.wallet.kafka.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7271977523192847663L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"com.michalenok.wallet.kafka.schema\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"logicalType\":\"UUID\"},{\"name\":\"accountTo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"logicalType\":\"UUID\"},{\"name\":\"referenceNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"logicalType\":\"BigDecimal\"},{\"name\":\"currencyCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"logicalType\":\"TransactionStatus\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<Transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String uuid;
  private java.lang.String accountTo;
  private java.lang.String referenceNumber;
  private java.lang.String amount;
  private java.lang.String currencyCode;
  private java.lang.String status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param accountTo The new value for accountTo
   * @param referenceNumber The new value for referenceNumber
   * @param amount The new value for amount
   * @param currencyCode The new value for currencyCode
   * @param status The new value for status
   */
  public Transaction(java.lang.String uuid, java.lang.String accountTo, java.lang.String referenceNumber, java.lang.String amount, java.lang.String currencyCode, java.lang.String status) {
    this.uuid = uuid;
    this.accountTo = accountTo;
    this.referenceNumber = referenceNumber;
    this.amount = amount;
    this.currencyCode = currencyCode;
    this.status = status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return accountTo;
    case 2: return referenceNumber;
    case 3: return amount;
    case 4: return currencyCode;
    case 5: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = value$ != null ? value$.toString() : null; break;
    case 1: accountTo = value$ != null ? value$.toString() : null; break;
    case 2: referenceNumber = value$ != null ? value$.toString() : null; break;
    case 3: amount = value$ != null ? value$.toString() : null; break;
    case 4: currencyCode = value$ != null ? value$.toString() : null; break;
    case 5: status = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'accountTo' field.
   * @return The value of the 'accountTo' field.
   */
  public java.lang.String getAccountTo() {
    return accountTo;
  }


  /**
   * Sets the value of the 'accountTo' field.
   * @param value the value to set.
   */
  public void setAccountTo(java.lang.String value) {
    this.accountTo = value;
  }

  /**
   * Gets the value of the 'referenceNumber' field.
   * @return The value of the 'referenceNumber' field.
   */
  public java.lang.String getReferenceNumber() {
    return referenceNumber;
  }


  /**
   * Sets the value of the 'referenceNumber' field.
   * @param value the value to set.
   */
  public void setReferenceNumber(java.lang.String value) {
    this.referenceNumber = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.String getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.String value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currencyCode' field.
   * @return The value of the 'currencyCode' field.
   */
  public java.lang.String getCurrencyCode() {
    return currencyCode;
  }


  /**
   * Sets the value of the 'currencyCode' field.
   * @param value the value to set.
   */
  public void setCurrencyCode(java.lang.String value) {
    this.currencyCode = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static com.michalenok.wallet.kafka.schema.Transaction.Builder newBuilder() {
    return new com.michalenok.wallet.kafka.schema.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.michalenok.wallet.kafka.schema.Transaction.Builder newBuilder(com.michalenok.wallet.kafka.schema.Transaction.Builder other) {
    if (other == null) {
      return new com.michalenok.wallet.kafka.schema.Transaction.Builder();
    } else {
      return new com.michalenok.wallet.kafka.schema.Transaction.Builder(other);
    }
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.michalenok.wallet.kafka.schema.Transaction.Builder newBuilder(com.michalenok.wallet.kafka.schema.Transaction other) {
    if (other == null) {
      return new com.michalenok.wallet.kafka.schema.Transaction.Builder();
    } else {
      return new com.michalenok.wallet.kafka.schema.Transaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private java.lang.String uuid;
    private java.lang.String accountTo;
    private java.lang.String referenceNumber;
    private java.lang.String amount;
    private java.lang.String currencyCode;
    private java.lang.String status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.michalenok.wallet.kafka.schema.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountTo)) {
        this.accountTo = data().deepCopy(fields()[1].schema(), other.accountTo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.referenceNumber)) {
        this.referenceNumber = data().deepCopy(fields()[2].schema(), other.referenceNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[4].schema(), other.currencyCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.michalenok.wallet.kafka.schema.Transaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountTo)) {
        this.accountTo = data().deepCopy(fields()[1].schema(), other.accountTo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.referenceNumber)) {
        this.referenceNumber = data().deepCopy(fields()[2].schema(), other.referenceNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currencyCode)) {
        this.currencyCode = data().deepCopy(fields()[4].schema(), other.currencyCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountTo' field.
      * @return The value.
      */
    public java.lang.String getAccountTo() {
      return accountTo;
    }


    /**
      * Sets the value of the 'accountTo' field.
      * @param value The value of 'accountTo'.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder setAccountTo(java.lang.String value) {
      validate(fields()[1], value);
      this.accountTo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountTo' field has been set.
      * @return True if the 'accountTo' field has been set, false otherwise.
      */
    public boolean hasAccountTo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountTo' field.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder clearAccountTo() {
      accountTo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'referenceNumber' field.
      * @return The value.
      */
    public java.lang.String getReferenceNumber() {
      return referenceNumber;
    }


    /**
      * Sets the value of the 'referenceNumber' field.
      * @param value The value of 'referenceNumber'.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder setReferenceNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.referenceNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'referenceNumber' field has been set.
      * @return True if the 'referenceNumber' field has been set, false otherwise.
      */
    public boolean hasReferenceNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'referenceNumber' field.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder clearReferenceNumber() {
      referenceNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.String getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder setAmount(java.lang.String value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currencyCode' field.
      * @return The value.
      */
    public java.lang.String getCurrencyCode() {
      return currencyCode;
    }


    /**
      * Sets the value of the 'currencyCode' field.
      * @param value The value of 'currencyCode'.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder setCurrencyCode(java.lang.String value) {
      validate(fields()[4], value);
      this.currencyCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyCode' field has been set.
      * @return True if the 'currencyCode' field has been set, false otherwise.
      */
    public boolean hasCurrencyCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currencyCode' field.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder clearCurrencyCode() {
      currencyCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder setStatus(java.lang.String value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.michalenok.wallet.kafka.schema.Transaction.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.accountTo = fieldSetFlags()[1] ? this.accountTo : (java.lang.String) defaultValue(fields()[1]);
        record.referenceNumber = fieldSetFlags()[2] ? this.referenceNumber : (java.lang.String) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.String) defaultValue(fields()[3]);
        record.currencyCode = fieldSetFlags()[4] ? this.currencyCode : (java.lang.String) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uuid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uuid);
    }

    if (this.accountTo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.accountTo);
    }

    if (this.referenceNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.referenceNumber);
    }

    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.amount);
    }

    if (this.currencyCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.currencyCode);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uuid = null;
      } else {
        this.uuid = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accountTo = null;
      } else {
        this.accountTo = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.referenceNumber = null;
      } else {
        this.referenceNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        this.amount = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.currencyCode = null;
      } else {
        this.currencyCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uuid = null;
          } else {
            this.uuid = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accountTo = null;
          } else {
            this.accountTo = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.referenceNumber = null;
          } else {
            this.referenceNumber = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            this.amount = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currencyCode = null;
          } else {
            this.currencyCode = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










